class Solution {
public:
    ListNode* reverser(ListNode* head)
    {
        if (!head || ! (head -> next))
        return head;
        ListNode* prev = NULL, *curr = head, *nxt = head -> next;
        while (nxt)
        {
            curr -> next = prev; 
            prev = curr;
            curr = nxt;
            nxt = nxt -> next;
        }
        curr -> next = prev;
        return curr;
    }
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if (!(head -> next)) return head;
        ListNode *node1, *node2, *dummy = new ListNode();
        dummy -> next = head;
        ListNode* curr = dummy;
        int counter = 0;
        while (curr)
        {
            if (counter + 1 == left)
            {
                node1 = curr;
            }
            if (counter == right)
            {
                node2 = curr -> next;
                curr -> next = NULL;
                break;
            }   
            curr = curr -> next;
            counter++;
        }
        node1 -> next = reverser(node1 -> next);
        while (node1 -> next)
        {
            node1 = node1 -> next;
        }
        node1 -> next = node2;
        return dummy -> next;
    }
};
